[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "template"
version = "0.2.0"
description = "Modern Python project template with AI-first development and latest tooling"
readme = "README.md"
keywords = [
  "ai-development",
  "claude-code",
  "python",
  "template",
  "uv",
  "ruff",
  "pyright",
  "modern",
]
license = { file = "LICENSE" }
authors = [ { name = "takuoko", email = "to78314910@gmail.com" } ]
maintainers = [ { name = "takuoko", email = "to78314910@gmail.com" } ]
requires-python = ">=3.12"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Typing :: Typed",
]
dependencies = [
  # Add your dependencies here
]

[project.scripts]
template = "modules.cli:run"

optional-dependencies.dev = [
  "coverage[toml]>=7.6",
  "pre-commit>=4.0",
  "pyright>=1.1.390",
  "pytest>=8.3",
  "pytest-cov>=6.0",
  "pytest-xdist>=3.6",
  "pytest-timeout>=2.3",
  "ruff>=0.8.0",
  "types-requests>=2.32",
  "types-setuptools>=75.6",
]
optional-dependencies.docs = [
  "furo>=2024.8.6",
  "linkify-it-py>=2.0.3",
  "myst-parser>=4.0",
  "sphinx>=8.1",
  "sphinx-autoapi>=3.5",
  "sphinx-autobuild>=2024.10.3",
  "sphinx-copybutton>=0.5.2",
  "sphinx-design>=0.6.1",
  "sphinx-tabs>=3.4.7",
  "sphinx-autodoc-typehints>=2.5",
]

[tool.hatch.build.targets.wheel]
packages = [ "modules" ]

[tool.ruff]
target-version = "py312"
line-length = 88

format.indent-style = "space"
format.quote-style = "double"
format.docstring-code-format = true
format.docstring-code-line-length = 72

lint.select = [ "ALL" ]
lint.ignore = [
  "D203",    # one-blank-line-before-class
  "D213",    # multi-line-summary-second-line
  "COM812",  # missing-trailing-comma (conflicts with formatter)
  "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
]
lint.unfixable = [ "F401" ]  # unused imports

lint.per-file-ignores."tests/**/*.py" = [
  "S101",    # assert-used
  "PLR2004", # magic-value-comparison
  "ARG001",  # unused-function-argument
]

lint.isort.known-first-party = [ "modules" ]
lint.pydocstyle.convention = "google"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
python_files = [ "test_*.py", "*_test.py" ]
addopts = [
  "--cov=modules",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-report=xml",
  "--strict-markers",
  "--strict-config",
  "--verbose",
  "-ra",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = [ "modules" ]
omit = [ "*/tests/*", "*/test_*", "*/__pycache__/*" ]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if __name__ == .__main__.:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
  "@overload",
  "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 80

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "**/.*",
]
include = [
  "modules",
  "tests",
]

[tool.wheel]
exclude = [
  "build*",
  "docs*",
  "dist*",
  "tests*",
  "docker*",
  "data*",
  "work_dirs*",
  "projects*",
]
